'use strict';
const config = require('config');
const mongoose = require('mongoose');

/**
 * ConnectionPool
 */
class ConnectionPool {
  constructor() {
    this.connectionPool = {
      // Nothing yet.
    };
  }

  /**
   * Generate Model for Tenant
   * @param tenantName {string}
   * @param modelFactory {object}
   * @return models {object}
   * @see mongoose models
   * These models are generated by the provided model factory.
   * Requirements foro modelFactory
   * - createModels(connection) method
   */
  generateModelForTenant(tenantName, modelFactory) {
    let myModel = null;
    let tenantNameExists = this.connectionPool.hasOwnProperty(tenantName);

    if (tenantNameExists) {
      myModle = this.connectionPool[tenantName].model;
    } else {
      // Would like to be able to send an array of replica set members..
      let connection = mongoose.createConnection(`${config.db.url}/${tenantName}`);

      let model = modelFactory.createModels(connection);
      model.connection = connection;
      this.connectionPool[tenantName] = {
        conn: connection,
        model: model,
      };

      /** Clean Up **/
      connection.on('close', () => {
        this._removeConnection(tenantName);
      });

      myModel = this.connectionPool[tenantName];

      return myModel;
    }
  }

  /**
   * Remove Connection
   * @param tenantName {string}
   * @returns {Void}
   */
  _removeConnection(tenantName) {
    delete this.connectionPool[tenantName];
  }
}

// Make this Singleton
const myPool = new ConnectionPool();

// Public
module.exports.createConnection = (tenantName, modelFactory) => {
  return myPool.generateModelForTenant(tenantName, modelFactory);
};
